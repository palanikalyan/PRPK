Got it ✅ — we’ll expand from 4 functions (Check Balance, Deposit, Withdraw, Exit) to 8 functions for the ATM CLI while keeping the same clean layered structure.

New Menu (8 functions)
Check Balance

Deposit

Withdraw

View Account Details

Change Account Holder Name

Transfer Money to Another Account

View Last 5 Transactions

Exit

POJO Update (ATMPojo.java)
We’ll add a transaction history list.

java
Copy
Edit
package com.atm.pojos;

import java.util.LinkedList;

public class ATMPojo {
    private String accountNumber;
    private String accountHolder;
    private double balance;
    private LinkedList<String> transactions = new LinkedList<>();

    public ATMPojo(String accountNumber, String accountHolder, double balance) {
        this.accountNumber = accountNumber;
        this.accountHolder = accountHolder;
        this.balance = balance;
    }

    public String getAccountNumber() { return accountNumber; }
    public void setAccountNumber(String accountNumber) { this.accountNumber = accountNumber; }

    public String getAccountHolder() { return accountHolder; }
    public void setAccountHolder(String accountHolder) { this.accountHolder = accountHolder; }

    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }

    public LinkedList<String> getTransactions() { return transactions; }
    public void addTransaction(String detail) {
        if (transactions.size() >= 5) {
            transactions.removeFirst(); // Keep last 5 only
        }
        transactions.add(detail);
    }
}
DAO Update (ATMDao.java)
No big change — just supports update.

java
Copy
Edit
package com.atm.dao;

import com.atm.pojos.ATMPojo;

public interface ATMDao {
    ATMPojo getAccount(String accountNumber);
    void updateAccount(ATMPojo account);
}
DAO Implementation Update (ATMDaoImpl.java)
We’ll add two accounts so transfers make sense.

java
Copy
Edit
package com.atm.dao;

import com.atm.pojos.ATMPojo;
import java.util.HashMap;
import java.util.Map;

public class ATMDaoImpl implements ATMDao {
    private Map<String, ATMPojo> accounts = new HashMap<>();

    public ATMDaoImpl() {
        accounts.put("12345", new ATMPojo("12345", "John Doe", 5000));
        accounts.put("67890", new ATMPojo("67890", "Jane Smith", 3000));
    }

    @Override
    public ATMPojo getAccount(String accountNumber) {
        return accounts.get(accountNumber);
    }

    @Override
    public void updateAccount(ATMPojo account) {
        accounts.put(account.getAccountNumber(), account);
    }
}
Service Update (ATMService.java)
java
Copy
Edit
package com.atm.service;

import com.atm.dao.ATMDao;
import com.atm.pojos.ATMPojo;

public class ATMService {
    private ATMDao dao;

    public ATMService(ATMDao dao) {
        this.dao = dao;
    }

    public double checkBalance(String accNum) {
        ATMPojo account = dao.getAccount(accNum);
        return account != null ? account.getBalance() : -1;
    }

    public boolean deposit(String accNum, double amount) {
        ATMPojo account = dao.getAccount(accNum);
        if (account != null && amount > 0) {
            account.setBalance(account.getBalance() + amount);
            account.addTransaction("Deposited: " + amount);
            dao.updateAccount(account);
            return true;
        }
        return false;
    }

    public boolean withdraw(String accNum, double amount) {
        ATMPojo account = dao.getAccount(accNum);
        if (account != null && amount > 0 && account.getBalance() >= amount) {
            account.setBalance(account.getBalance() - amount);
            account.addTransaction("Withdrawn: " + amount);
            dao.updateAccount(account);
            return true;
        }
        return false;
    }

    public ATMPojo getAccountDetails(String accNum) {
        return dao.getAccount(accNum);
    }

    public boolean changeAccountHolder(String accNum, String newName) {
        ATMPojo account = dao.getAccount(accNum);
        if (account != null && newName != null && !newName.isEmpty()) {
            account.setAccountHolder(newName);
            account.addTransaction("Name changed to: " + newName);
            dao.updateAccount(account);
            return true;
        }
        return false;
    }

    public boolean transfer(String fromAcc, String toAcc, double amount) {
        ATMPojo sender = dao.getAccount(fromAcc);
        ATMPojo receiver = dao.getAccount(toAcc);

        if (sender != null && receiver != null && amount > 0 && sender.getBalance() >= amount) {
            sender.setBalance(sender.getBalance() - amount);
            sender.addTransaction("Transferred " + amount + " to " + toAcc);

            receiver.setBalance(receiver.getBalance() + amount);
            receiver.addTransaction("Received " + amount + " from " + fromAcc);

            dao.updateAccount(sender);
            dao.updateAccount(receiver);
            return true;
        }
        return false;
    }

    public String[] getLastTransactions(String accNum) {
        ATMPojo account = dao.getAccount(accNum);
        if (account != null) {
            return account.getTransactions().toArray(new String[0]);
        }
        return new String[0];
    }
}
Main CLI Update (ATMMainPresentation.java)
java
Copy
Edit
package com.atm;

import com.atm.dao.ATMDaoImpl;
import com.atm.pojos.ATMPojo;
import com.atm.service.ATMService;
import java.util.Scanner;

public class ATMMainPresentation {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ATMService service = new ATMService(new ATMDaoImpl());

        System.out.print("Enter Account Number: ");
        String accNum = sc.nextLine();

        int choice;
        do {
            System.out.println("\n=== ATM Menu ===");
            System.out.println("1. Check Balance");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. View Account Details");
            System.out.println("5. Change Account Holder Name");
            System.out.println("6. Transfer Money");
            System.out.println("7. View Last 5 Transactions");
            System.out.println("8. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.println("Balance: " + service.checkBalance(accNum));
                    break;

                case 2:
                    System.out.print("Enter deposit amount: ");
                    double deposit = sc.nextDouble();
                    System.out.println(service.deposit(accNum, deposit) ? "Deposit successful." : "Deposit failed.");
                    break;

                case 3:
                    System.out.print("Enter withdrawal amount: ");
                    double withdraw = sc.nextDouble();
                    System.out.println(service.withdraw(accNum, withdraw) ? "Withdrawal successful." : "Withdrawal failed.");
                    break;

                case 4:
                    ATMPojo account = service.getAccountDetails(accNum);
                    if (account != null) {
                        System.out.println("Account No: " + account.getAccountNumber());
                        System.out.println("Holder: " + account.getAccountHolder());
                        System.out.println("Balance: " + account.getBalance());
                    } else {
                        System.out.println("Account not found!");
                    }
                    break;

                case 5:
                    sc.nextLine();
                    System.out.print("Enter new name: ");
                    String newName = sc.nextLine();
                    System.out.println(service.changeAccountHolder(accNum, newName) ? "Name updated." : "Update failed.");
                    break;

                case 6:
                    sc.nextLine();
                    System.out.print("Enter receiver account number: ");
                    String receiverAcc = sc.nextLine();
                    System.out.print("Enter amount: ");
                    double transferAmt = sc.nextDouble();
                    System.out.println(service.transfer(accNum, receiverAcc, transferAmt) ? "Transfer successful." : "Transfer failed.");
                    break;

                case 7:
                    String[] txns = service.getLastTransactions(accNum);
                    System.out.println("Last Transactions:");
                    for (String t : txns) {
                        System.out.println(t);
                    }
                    break;

                case 8:
                    System.out.println("Exiting ATM...");
                    break;

                default:
                    System.out.println("Invalid choice!");
            }
        } while (choice != 8);

        sc.close();
    }
}
Now the ATM CLI supports 8 full functions while keeping the same POJO + DAO + Service + Main pattern as your BMS_GUVI project.

If you want, I can also make a UML diagram showing all classes and methods so you can present it clearly. That would make it easier to explain in interviews.








Ask ChatGPT





