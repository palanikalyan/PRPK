// Simple deposit methods for CryptoTradingCLI.java

private void depositFunds() {
    System.out.println("\n--- Deposit Funds ---");
    System.out.println("1. Bank Transfer");
    System.out.println("2. Add Test Funds (Demo)");
    System.out.println("3. Back");
    System.out.print("Choose option: ");
    
    int choice = getIntInput();
    switch (choice) {
        case 1:
            depositViaBank();
            break;
        case 2:
            addTestFunds();
            break;
        case 3:
            return;
        default:
            System.out.println("Invalid option.");
    }
}

private void depositViaBank() {
    System.out.println("\n--- Bank Transfer Deposit ---");
    
    try {
        // Check if user has bank accounts
        List<BankAccount> bankAccounts = bankAccountService.getUserBankAccounts(currentUser.getUserId());
        
        BankAccount selectedAccount;
        
        if (bankAccounts.isEmpty()) {
            // Add new bank account
            System.out.println("No bank accounts found. Let's add one:");
            selectedAccount = addBankAccount();
            if (selectedAccount == null) return;
        } else {
            // Show existing accounts
            System.out.println("Your Bank Accounts:");
            for (int i = 0; i < bankAccounts.size(); i++) {
                BankAccount account = bankAccounts.get(i);
                System.out.printf("%d. %s - %s%n", 
                    i + 1, account.getBankName(), account.getMaskedAccountNumber());
            }
            System.out.println((bankAccounts.size() + 1) + ". Add New Account");
            
            System.out.print("Select option: ");
            int choice = getIntInput();
            
            if (choice >= 1 && choice <= bankAccounts.size()) {
                selectedAccount = bankAccounts.get(choice - 1);
            } else if (choice == bankAccounts.size() + 1) {
                selectedAccount = addBankAccount();
                if (selectedAccount == null) return;
            } else {
                System.out.println("Invalid selection.");
                return;
            }
        }
        
        // Get deposit amount
        System.out.print("Enter deposit amount (USD): ");
        BigDecimal amount = getBigDecimalInput();
        
        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
            System.out.println("Invalid amount.");
            return;
        }
        
        // Process deposit
        BigDecimal fee = amount.multiply(new BigDecimal("0.01")); // 1% fee
        BigDecimal netAmount = amount.subtract(fee);
        
        System.out.printf("\nDeposit Summary:%n");
        System.out.printf("Bank: %s%n", selectedAccount.getBankName());
        System.out.printf("Account: %s%n", selectedAccount.getMaskedAccountNumber());
        System.out.printf("Amount: $%s%n", FormattingUtils.formatPrice(amount));
        System.out.printf("Fee: $%s%n", FormattingUtils.formatPrice(fee));
        System.out.printf("You'll receive: %s USDT%n", FormattingUtils.formatPrice(netAmount));
        
        System.out.print("Confirm deposit? (y/n): ");
        String confirm = scanner.nextLine().trim().toLowerCase();
        
        if ("y".equals(confirm) || "yes".equals(confirm)) {
            // Add USDT to wallet
            walletService.updateWalletBalance(currentUser.getUserId(), "USDT", netAmount, "ADD");
            
            // Create transaction record
            Transaction transaction = new Transaction();
            transaction.setUserId(currentUser.getUserId());
            transaction.setTransactionType("BANK_DEPOSIT");
            transaction.setToCurrency("USDT");
            transaction.setAmount(netAmount);
            transaction.setStatus("COMPLETED");
            transaction.setTransactionHash(SecurityUtils.generateTransactionHash());
            transaction.setBankAccountId(selectedAccount.getAccountId());
            
            transactionService.createTransaction(transaction);
            
            System.out.println("\nDeposit successful!");
            System.out.printf("%s USDT added to your wallet.%n", FormattingUtils.formatPrice(netAmount));
        } else {
            System.out.println("Deposit cancelled.");
        }
        
    } catch (SQLException e) {
        System.err.println("Deposit failed: " + e.getMessage());
    }
}

private BankAccount addBankAccount() {
    System.out.println("\n--- Add Bank Account ---");
    
    System.out.print("Bank Name: ");
    String bankName = scanner.nextLine().trim();
    
    System.out.print("Account Number: ");
    String accountNumber = scanner.nextLine().trim();
    
    System.out.print("Account Holder Name: ");
    String accountHolderName = scanner.nextLine().trim();
    
    if (bankName.isEmpty() || accountNumber.isEmpty() || accountHolderName.isEmpty()) {
        System.out.println("All fields are required.");
        return null;
    }
    
    try {
        BankAccount bankAccount = new BankAccount(currentUser.getUserId(), bankName, accountNumber, accountHolderName);
        BankAccount savedAccount = bankAccountService.addBankAccount(bankAccount);
        
        System.out.println("Bank account added successfully!");
        return savedAccount;
        
    } catch (SQLException e) {
        System.err.println("Failed to add bank account: " + e.getMessage());
        return null;
    }
}

private void addTestFunds() {
    System.out.println("\n--- Add Test Funds ---");
    
    System.out.print("Enter USDT amount: ");
    BigDecimal amount = getBigDecimalInput();
    
    if (amount.compareTo(BigDecimal.ZERO) <= 0) {
        System.out.println("Invalid amount.");
        return;
    }
    
    try {
        walletService.updateWalletBalance(currentUser.getUserId(), "USDT", amount, "ADD");
        
        // Create transaction record
        Transaction transaction = new Transaction();
        transaction.setUserId(currentUser.getUserId());
        transaction.setTransactionType("TEST_FUNDS");
        transaction.setToCurrency("USDT");
        transaction.setAmount(amount);
        transaction.setStatus("COMPLETED");
        transaction.setTransactionHash(SecurityUtils.generateTransactionHash());
        
        transactionService.createTransaction(transaction);
        
        System.out.println("Test funds added successfully!");
        System.out.printf("%s USDT added to your wallet.%n", FormattingUtils.formatPrice(amount));
        
    } catch (SQLException e) {
        System.err.println("Failed to add test funds: " + e.getMessage());
    }
}

// Simple method to view bank accounts
private void viewBankAccounts() {
    System.out.println("\n--- Your Bank Accounts ---");
    
    try {
        List<BankAccount> bankAccounts = bankAccountService.getUserBankAccounts(currentUser.getUserId());
        
        if (bankAccounts.isEmpty()) {
            System.out.println("No bank accounts found.");
            return;
        }
        
        for (BankAccount account : bankAccounts) {
            System.out.printf("Bank: %s%n", account.getBankName());
            System.out.printf("Account: %s%n", account.getMaskedAccountNumber());
            System.out.printf("Holder: %s%n", account.getAccountHolderName());
            System.out.println("---");
        }
        
    } catch (SQLException e) {
        System.err.println("Failed to load bank accounts: " + e.getMessage());
    }
}

// Update your main menu to include deposit option
// Add case 8 for depositFunds() in your main menu switch statement
