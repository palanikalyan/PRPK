

-- Simple Bank Account Table
CREATE TABLE bank_accounts (
    account_id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    bank_name VARCHAR(100) NOT NULL,
    account_number VARCHAR(20) NOT NULL,
    account_holder_name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    UNIQUE KEY unique_user_account (user_id, account_number)
);

-- Update transactions table to link with bank accounts
ALTER TABLE transactions 
ADD COLUMN bank_account_id BIGINT NULL,
ADD FOREIGN KEY (bank_account_id) REFERENCES bank_accounts(account_id);

-- Simple Java Model
/*
package com.cryptotrading.model;

public class BankAccount {
    private Long accountId;
    private Long userId;
    private String bankName;
    private String accountNumber;
    private String accountHolderName;
    
    // Constructor
    public BankAccount(Long userId, String bankName, String accountNumber, String accountHolderName) {
        this.userId = userId;
        this.bankName = bankName;
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
    }
    
    // Getters and Setters
    public Long getAccountId() { return accountId; }
    public void setAccountId(Long accountId) { this.accountId = accountId; }
    
    public Long getUserId() { return userId; }
    public void setUserId(Long userId) { this.userId = userId; }
    
    public String getBankName() { return bankName; }
    public void setBankName(String bankName) { this.bankName = bankName; }
    
    public String getAccountNumber() { return accountNumber; }
    public void setAccountNumber(String accountNumber) { this.accountNumber = accountNumber; }
    
    public String getAccountHolderName() { return accountHolderName; }
    public void setAccountHolderName(String accountHolderName) { this.accountHolderName = accountHolderName; }
    
    // Helper method
    public String getMaskedAccountNumber() {
        return "****" + accountNumber.substring(accountNumber.length() - 4);
    }
}
*/

-- Simple Service Class
/*
package com.cryptotrading.service;

import com.cryptotrading.model.BankAccount;
import com.cryptotrading.utils.DatabaseConnection;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class BankAccountService {
    
    public BankAccount addBankAccount(BankAccount bankAccount) throws SQLException {
        Connection connection = DatabaseConnection.getConnection();
        
        String sql = "INSERT INTO bank_accounts (user_id, bank_name, account_number, account_holder_name) VALUES (?, ?, ?, ?)";
        PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
        
        statement.setLong(1, bankAccount.getUserId());
        statement.setString(2, bankAccount.getBankName());
        statement.setString(3, bankAccount.getAccountNumber());
        statement.setString(4, bankAccount.getAccountHolderName());
        
        statement.executeUpdate();
        
        ResultSet keys = statement.getGeneratedKeys();
        if (keys.next()) {
            bankAccount.setAccountId(keys.getLong(1));
        }
        
        return bankAccount;
    }
    
    public List<BankAccount> getUserBankAccounts(Long userId) throws SQLException {
        Connection connection = DatabaseConnection.getConnection();
        List<BankAccount> accounts = new ArrayList<>();
        
        String sql = "SELECT * FROM bank_accounts WHERE user_id = ?";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setLong(1, userId);
        
        ResultSet rs = statement.executeQuery();
        while (rs.next()) {
            BankAccount account = new BankAccount(
                rs.getLong("user_id"),
                rs.getString("bank_name"),
                rs.getString("account_number"),
                rs.getString("account_holder_name")
            );
            account.setAccountId(rs.getLong("account_id"));
            accounts.add(account);
        }
        
        return accounts;
    }
}
*/
// Simple deposit methods for CryptoTradingCLI.java

private void depositFunds() {
    System.out.println("\n--- Deposit Funds ---");
    System.out.println("1. Bank Transfer");
    System.out.println("2. Add Test Funds (Demo)");
    System.out.println("3. Back");
    System.out.print("Choose option: ");
    
    int choice = getIntInput();
    switch (choice) {
        case 1:
            depositViaBank();
            break;
        case 2:
            addTestFunds();
            break;
        case 3:
            return;
        default:
            System.out.println("Invalid option.");
    }
}

private void depositViaBank() {
    System.out.println("\n--- Bank Transfer Deposit ---");
    
    try {
        // Check if user has bank accounts
        List<BankAccount> bankAccounts = bankAccountService.getUserBankAccounts(currentUser.getUserId());
        
        BankAccount selectedAccount;
        
        if (bankAccounts.isEmpty()) {
            // Add new bank account
            System.out.println("No bank accounts found. Let's add one:");
            selectedAccount = addBankAccount();
            if (selectedAccount == null) return;
        } else {
            // Show existing accounts
            System.out.println("Your Bank Accounts:");
            for (int i = 0; i < bankAccounts.size(); i++) {
                BankAccount account = bankAccounts.get(i);
                System.out.printf("%d. %s - %s%n", 
                    i + 1, account.getBankName(), account.getMaskedAccountNumber());
            }
            System.out.println((bankAccounts.size() + 1) + ". Add New Account");
            
            System.out.print("Select option: ");
            int choice = getIntInput();
            
            if (choice >= 1 && choice <= bankAccounts.size()) {
                selectedAccount = bankAccounts.get(choice - 1);
            } else if (choice == bankAccounts.size() + 1) {
                selectedAccount = addBankAccount();
                if (selectedAccount == null) return;
            } else {
                System.out.println("Invalid selection.");
                return;
            }
        }
        
        // Get deposit amount
        System.out.print("Enter deposit amount (USD): ");
        BigDecimal amount = getBigDecimalInput();
        
        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
            System.out.println("Invalid amount.");
            return;
        }
        
        // Process deposit
        BigDecimal fee = amount.multiply(new BigDecimal("0.01")); // 1% fee
        BigDecimal netAmount = amount.subtract(fee);
        
        System.out.printf("\nDeposit Summary:%n");
        System.out.printf("Bank: %s%n", selectedAccount.getBankName());
        System.out.printf("Account: %s%n", selectedAccount.getMaskedAccountNumber());
        System.out.printf("Amount: $%s%n", FormattingUtils.formatPrice(amount));
        System.out.printf("Fee: $%s%n", FormattingUtils.formatPrice(fee));
        System.out.printf("You'll receive: %s USDT%n", FormattingUtils.formatPrice(netAmount));
        
        System.out.print("Confirm deposit? (y/n): ");
        String confirm = scanner.nextLine().trim().toLowerCase();
        
        if ("y".equals(confirm) || "yes".equals(confirm)) {
            // Add USDT to wallet
            walletService.updateWalletBalance(currentUser.getUserId(), "USDT", netAmount, "ADD");
            
            // Create transaction record
            Transaction transaction = new Transaction();
            transaction.setUserId(currentUser.getUserId());
            transaction.setTransactionType("BANK_DEPOSIT");
            transaction.setToCurrency("USDT");
            transaction.setAmount(netAmount);
            transaction.setStatus("COMPLETED");
            transaction.setTransactionHash(SecurityUtils.generateTransactionHash());
            transaction.setBankAccountId(selectedAccount.getAccountId());
            
            transactionService.createTransaction(transaction);
            
            System.out.println("\nDeposit successful!");
            System.out.printf("%s USDT added to your wallet.%n", FormattingUtils.formatPrice(netAmount));
        } else {
            System.out.println("Deposit cancelled.");
        }
        
    } catch (SQLException e) {
        System.err.println("Deposit failed: " + e.getMessage());
    }
}

private BankAccount addBankAccount() {
    System.out.println("\n--- Add Bank Account ---");
    
    System.out.print("Bank Name: ");
    String bankName = scanner.nextLine().trim();
    
    System.out.print("Account Number: ");
    String accountNumber = scanner.nextLine().trim();
    
    System.out.print("Account Holder Name: ");
    String accountHolderName = scanner.nextLine().trim();
    
    if (bankName.isEmpty() || accountNumber.isEmpty() || accountHolderName.isEmpty()) {
        System.out.println("All fields are required.");
        return null;
    }
    
    try {
        BankAccount bankAccount = new BankAccount(currentUser.getUserId(), bankName, accountNumber, accountHolderName);
        BankAccount savedAccount = bankAccountService.addBankAccount(bankAccount);
        
        System.out.println("Bank account added successfully!");
        return savedAccount;
        
    } catch (SQLException e) {
        System.err.println("Failed to add bank account: " + e.getMessage());
        return null;
    }
}

private void addTestFunds() {
    System.out.println("\n--- Add Test Funds ---");
    
    System.out.print("Enter USDT amount: ");
    BigDecimal amount = getBigDecimalInput();
    
    if (amount.compareTo(BigDecimal.ZERO) <= 0) {
        System.out.println("Invalid amount.");
        return;
    }
    
    try {
        walletService.updateWalletBalance(currentUser.getUserId(), "USDT", amount, "ADD");
        
        // Create transaction record
        Transaction transaction = new Transaction();
        transaction.setUserId(currentUser.getUserId());
        transaction.setTransactionType("TEST_FUNDS");
        transaction.setToCurrency("USDT");
        transaction.setAmount(amount);
        transaction.setStatus("COMPLETED");
        transaction.setTransactionHash(SecurityUtils.generateTransactionHash());
        
        transactionService.createTransaction(transaction);
        
        System.out.println("Test funds added successfully!");
        System.out.printf("%s USDT added to your wallet.%n", FormattingUtils.formatPrice(amount));
        
    } catch (SQLException e) {
        System.err.println("Failed to add test funds: " + e.getMessage());
    }
}

// Simple method to view bank accounts
private void viewBankAccounts() {
    System.out.println("\n--- Your Bank Accounts ---");
    
    try {
        List<BankAccount> bankAccounts = bankAccountService.getUserBankAccounts(currentUser.getUserId());
        
        if (bankAccounts.isEmpty()) {
            System.out.println("No bank accounts found.");
            return;
        }
        
        for (BankAccount account : bankAccounts) {
            System.out.printf("Bank: %s%n", account.getBankName());
            System.out.printf("Account: %s%n", account.getMaskedAccountNumber());
            System.out.printf("Holder: %s%n", account.getAccountHolderName());
            System.out.println("---");
        }
        
    } catch (SQLException e) {
        System.err.println("Failed to load bank accounts: " + e.getMessage());
    }
}

// Update your main menu to include deposit option
// Add case 8 for depositFunds() in your main menu switch statement
